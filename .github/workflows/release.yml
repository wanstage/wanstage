name: wanstage release (tag→build→sign→GitHub Release)

on:
  # v20250926 や v20250926-image,media のようなタグで発火
  push:
    tags:
      - "v*"
  # 手動実行も残す（任意）
  workflow_dispatch:

permissions:
  contents: write  # GitHub Release 作成・アップロードで必要

env:
  MPW: ${{ secrets.MINISIGN_PASSPHRASE }}
  SECKEY_PATH: ${{ github.workspace }}/.minisign_keys/minisign_seckey.txt
  PUBKEY_PATH: ${{ github.workspace }}/minisign_pubkey.txt

jobs:
  build-sign-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Ensure scripts are executable
        run: |
          chmod +x ./release-local.zsh 2>/dev/null || true
          chmod +x ./scripts/wan-clean.sh 2>/dev/null || true
          chmod +x ./pack-by-category.zsh 2>/dev/null || true
          chmod +x ./collect-licenses.zsh 2>/dev/null || true

      - name: Install tooling (brew)
        run: |
          brew update
          brew install minisign gnu-tar zip || true

      - name: Restore minisign keys from secrets
        run: |
          mkdir -p "$(dirname "${SECKEY_PATH}")"
          if [ -n "${{ secrets.MINISIGN_SECKEY_B64 }}" ]; then
            echo "${{ secrets.MINISIGN_SECKEY_B64 }}" | base64 --decode > "${SECKEY_PATH}"
            chmod 600 "${SECKEY_PATH}"
          fi
          if [ -n "${{ secrets.MINISIGN_PUBKEY_B64 }}" ]; then
            echo "${{ secrets.MINISIGN_PUBKEY_B64 }}" | base64 --decode > "${PUBKEY_PATH}"
            chmod 644 "${PUBKEY_PATH}"
          fi

      - name: Parse tag → reldate & categories
        id: tag
        shell: bash
        run: |
          TAG="${GITHUB_REF_NAME}"
          # 例: v20250926-image,media
          RELDATE=""
          CATS=""
          if [[ "$TAG" =~ ^v([0-9]{8})(?:-([A-Za-z0-9_,.-]+))?$ ]]; then
            RELDATE="${BASH_REMATCH[1]}"
            CATS="${BASH_REMATCH[2]}"
          fi
          echo "reldate=$RELDATE" >> "$GITHUB_OUTPUT"
          echo "categories=$CATS"  >> "$GITHUB_OUTPUT"

      - name: Build & (optionally) sign
        env:
          HOME: ${{ github.workspace }}
        run: |
          # minisign の既定パスに秘密鍵を置く（ある場合）
          mkdir -p "$HOME/.minisign_keys"
          if [ -f "${SECKEY_PATH}" ]; then
            cp -f "${SECKEY_PATH}" "$HOME/.minisign_keys/minisign_seckey.txt"
            chmod 600 "$HOME/.minisign_keys/minisign_seckey.txt"
          fi
          # 公開鍵同梱（任意）
          if [ -f "${PUBKEY_PATH}" ] && [ ! -f "./minisign_pubkey.txt" ]; then
            cp -f "${PUBKEY_PATH}" ./minisign_pubkey.txt
          fi

          args=(--clean --sign)
          [ -n "${{ steps.tag.outputs.reldate }}" ]    && args+=(--reldate="${{ steps.tag.outputs.reldate }}")
          [ -n "${{ steps.tag.outputs.categories }}" ] && args+=(--categories="${{ steps.tag.outputs.categories }}")

          echo "RUN: ./release-local.zsh \${args[@]}"
          ./release-local.zsh "${args[@]}"

      - name: Collect paths for release assets
        id: assets
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t files < <(\
            ls -1 \
              release_*.* \
              release_*/* \
              release_all_*.* \
              release_all_*/* \
              SHA256SUMS_release_all_*.txt 2>/dev/null || true \
          )
          if ((${#files[@]}==0)); then
            echo "No build outputs found." >&2
            # 空で通す（上流で検出できるように）
          fi
          {
            printf 'paths<<__EOL__\n'
            printf '%s\n' "${files[@]}"
            printf '__EOL__\n'
          } >> "$GITHUB_OUTPUT"

      - name: Create/Update GitHub Release (macOS artifacts)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
          files: ${{ steps.assets.outputs.paths }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload as workflow artifact (for Windows re-zip step)
        uses: actions/upload-artifact@v4
        with:
          name: macos-release
          path: |
            release_*.* 
            release_*/*
            release_all_*.* 
            release_all_*/* 
            SHA256SUMS_release_all_*.txt
          if-no-files-found: warn
          retention-days: 7

  rezip-windows-and-attach:
    needs: build-sign-macos
    runs-on: windows-latest
    steps:
      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-release
          path: macos-release

      - name: Create Windows-friendly ZIPs
        shell: pwsh
        run: |
          Get-ChildItem -Recurse "macos-release\release_all_*" -Directory | ForEach-Object {
            $name = Split-Path $_.FullName -Leaf
            $zip  = "$name-windows.zip"
            if (Test-Path $zip) { Remove-Item $zip -Force }
            Compress-Archive -Path "$($_.FullName)\*" -DestinationPath $zip
          }

      - name: Attach Windows ZIPs to the same Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: "*-windows.zip"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
